const { Octokit } = require("@octokit/rest");
const readline = require("readline");
const fs = require("fs");
const { spawn } = require("child_process");

const CONFIG_PATH = "./config.json";

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// ‡πÇ‡∏´‡∏•‡∏î config ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡πâ‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
function loadConfig(callback) {
  if (fs.existsSync(CONFIG_PATH)) {
    const config = JSON.parse(fs.readFileSync(CONFIG_PATH, "utf8"));
    callback(config.username, config.auth);
  } else {
    rl.question("Enter your GitHub username: ", (username) => {
      rl.question("Enter your GitHub personal access token: ", (auth) => {
        const config = { username, auth };
        fs.writeFileSync(CONFIG_PATH, JSON.stringify(config, null, 2));
        console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á config.json ‡πÅ‡∏•‡πâ‡∏ß!");
        rl.close();
        callback(username, auth);
      });
    });
  }
}

// ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Repo ‡πÅ‡∏•‡∏∞ Clone
function startCloning(username, auth) {
  const octokit = new Octokit({ auth });

  octokit.repos.listForAuthenticatedUser({ visibility: "all", per_page: 100 })
    .then(({ data }) => {
      if (data.length === 0) {
        console.log("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Repository ‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ");
        return;
      }

      console.log(`üîπ ‡∏û‡∏ö ${data.length} repositories ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏° clone...`);

      data.forEach((repo) => {
        const repoPath = `./clone/${repo.name}`;
        fs.mkdirSync(repoPath, { recursive: true });

        // ‡πÉ‡∏ä‡πâ Token ‡πÉ‡∏ô URL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á Private Repo
        const repoUrl = `https://${username}:${auth}@github.com/${repo.full_name}.git`;

        console.log(`üöÄ Cloning ${repo.full_name}...`);
        const clone = spawn("git", ["clone", repoUrl, repoPath]);

        clone.stdout.on("data", (data) => console.log(`stdout: ${data}`));
        clone.stderr.on("data", (data) => console.error(`stderr: ${data}`));
        
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Clone ‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏•‡∏ö Repo ‡∏ó‡∏¥‡πâ‡∏á
        clone.on("close", async (code) => {
          console.log(`‚úÖ Clone ${repo.name} ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!`);
          if (code == 0) {
            // ‡∏•‡∏ö Repo ‡∏ó‡∏¥‡πâ‡∏á
            const deleteRepo = await octokit.repos.delete({
              owner: repo.owner.login,
              repo: repo.name,
            });

            if (deleteRepo.status == 204) {
              console.log(`üóë ‡∏•‡∏ö ${repo.full_name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å GitHub ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
            } else {
              console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö ${repo.full_name} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å GitHub ‡πÑ‡∏î‡πâ`);
            }
          }
        });
      });
    })
    .catch((err) => {
      console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", err.message);
    });
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£
loadConfig(startCloning);
